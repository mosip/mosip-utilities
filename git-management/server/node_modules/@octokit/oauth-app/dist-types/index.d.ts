import { GetUserOctokitWithStateInterface } from "@octokit/oauth-app/dist-types/methods/get-user-octokit";
import { GetWebFlowAuthorizationUrlInterface } from "@octokit/oauth-app/dist-types/methods/get-web-flow-authorization-url";
import { CreateTokenInterface } from "@octokit/oauth-app/dist-types/methods/create-token";
import { CheckTokenInterface } from "@octokit/oauth-app/dist-types/methods/check-token";
import { ResetTokenInterface } from "@octokit/oauth-app/dist-types/methods/reset-token";
import { RefreshTokenInterface } from "@octokit/oauth-app/dist-types/methods/refresh-token";
import { ScopeTokenInterface } from "@octokit/oauth-app/dist-types/methods/scope-token";
import { DeleteTokenInterface } from "@octokit/oauth-app/dist-types/methods/delete-token";
import { DeleteAuthorizationInterface } from "@octokit/oauth-app/dist-types/methods/delete-authorization";
import type { AddEventHandler, ClientType, ClientTypeFromOptions, ConstructorOptions, OctokitTypeFromOptions, Options } from "@octokit/oauth-app/dist-types/types";
export type { HandlerOptions, OctokitRequest, OctokitResponse, } from "@octokit/oauth-app/dist-types/middleware/types";
export { handleRequest } from "@octokit/oauth-app/dist-types/middleware/handle-request";
export { createNodeMiddleware } from "@octokit/oauth-app/dist-types/middleware/node";
export { createCloudflareHandler, createWebWorkerHandler, } from "@octokit/oauth-app/dist-types/middleware/web-worker";
export { createAWSLambdaAPIGatewayV2Handler } from "@octokit/oauth-app/dist-types/middleware/aws-lambda/api-gateway-v2";
declare type Constructor<T> = new (...args: any[]) => T;
export declare class OAuthApp<TOptions extends Options<ClientType> = Options<"oauth-app">> {
    static VERSION: string;
    static defaults<TDefaults extends Options<ClientType>, S extends Constructor<OAuthApp<TDefaults>>>(this: S, defaults: TDefaults): {
        new (...args: any[]): {
            type: ClientTypeFromOptions<TDefaults>;
            on: AddEventHandler<TDefaults>;
            octokit: OctokitTypeFromOptions<TDefaults>;
            getUserOctokit: GetUserOctokitWithStateInterface<ClientTypeFromOptions<TDefaults>>;
            getWebFlowAuthorizationUrl: GetWebFlowAuthorizationUrlInterface<ClientTypeFromOptions<TDefaults>>;
            createToken: CreateTokenInterface<ClientTypeFromOptions<TDefaults>>;
            checkToken: CheckTokenInterface<ClientTypeFromOptions<TDefaults>>;
            resetToken: ResetTokenInterface<ClientTypeFromOptions<TDefaults>>;
            refreshToken: RefreshTokenInterface;
            scopeToken: ScopeTokenInterface;
            deleteToken: DeleteTokenInterface;
            deleteAuthorization: DeleteAuthorizationInterface;
        };
    } & S;
    constructor(options: ConstructorOptions<TOptions>);
    type: ClientTypeFromOptions<TOptions>;
    on: AddEventHandler<TOptions>;
    octokit: OctokitTypeFromOptions<TOptions>;
    getUserOctokit: GetUserOctokitWithStateInterface<ClientTypeFromOptions<TOptions>>;
    getWebFlowAuthorizationUrl: GetWebFlowAuthorizationUrlInterface<ClientTypeFromOptions<TOptions>>;
    createToken: CreateTokenInterface<ClientTypeFromOptions<TOptions>>;
    checkToken: CheckTokenInterface<ClientTypeFromOptions<TOptions>>;
    resetToken: ResetTokenInterface<ClientTypeFromOptions<TOptions>>;
    refreshToken: RefreshTokenInterface;
    scopeToken: ScopeTokenInterface;
    deleteToken: DeleteTokenInterface;
    deleteAuthorization: DeleteAuthorizationInterface;
}
